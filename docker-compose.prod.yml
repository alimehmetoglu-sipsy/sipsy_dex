version: '3.8'

services:
  # PostgreSQL Database Service - Production
  postgres:
    image: postgres:15-alpine
    container_name: dexagents-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dexagents}
      POSTGRES_USER: ${POSTGRES_USER:-dexagents}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_production_password}
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./apps/backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - postgres_logs_prod:/var/log/postgresql
    networks:
      - dexagents-prod-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-dexagents} -d ${POSTGRES_DB:-dexagents}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    # Production PostgreSQL optimizations
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=512MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Redis Cache Service - Production
  redis:
    image: redis:7-alpine
    container_name: dexagents-redis-prod
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data_prod:/data
      - ./redis/redis.prod.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - dexagents-prod-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 20s
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: redis-server /usr/local/etc/redis/redis.conf
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend Service - Production
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile.prod
      target: production
    container_name: dexagents-backend-prod
    ports:
      - "${BACKEND_PORT:-8080}:8000"
    environment:
      # API Settings
      API_V1_STR: /api/v1
      PROJECT_NAME: DexAgents - Windows PowerShell Agent
      VERSION: ${APP_VERSION:-3.3.0}
      ENVIRONMENT: production
      
      # Security - Use strong secret key in production
      SECRET_KEY: ${SECRET_KEY:-please-change-this-secret-key-in-production}
      SETTINGS_ENCRYPTION_KEY: ${SETTINGS_ENCRYPTION_KEY:-}
      
      # Database
      DATABASE_URL: ${DATABASE_URL:-postgresql://dexagents:secure_production_password@postgres:5432/dexagents}
      DB_POOL_SIZE: ${DB_POOL_SIZE:-20}
      DB_MAX_OVERFLOW: ${DB_MAX_OVERFLOW:-40}
      
      # Redis
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      
      # CORS Origins - Restrict in production
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-}
      
      # PowerShell Settings
      DEFAULT_TIMEOUT: 30
      MAX_TIMEOUT: 300
      
      # Agent Settings
      AGENT_INSTALLER_PATH: agent_installers
      TEMP_DIR: temp
      
      # AI Settings
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      AI_MODEL: ${AI_MODEL:-gpt-3.5-turbo}
      AI_MAX_TOKENS: ${AI_MAX_TOKENS:-500}
      
      # Monitoring
      METRICS_ENABLED: "true"
      HEALTH_CHECK_ENABLED: "true"
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # Performance
      PYTHONPATH: /app
      PYTHONUNBUFFERED: 1
      PYTHONDONTWRITEBYTECODE: 1
      WORKERS: ${GUNICORN_WORKERS:-4}
      
    volumes:
      # Persistent data only (no source code mounting)
      - backend_data_prod:/app/data
      - backend_logs_prod:/app/logs
      - backend_temp_prod:/app/temp
      - backend_installers_prod:/app/agent_installers
      - backend_uploads_prod:/app/uploads
      
    networks:
      - dexagents-prod-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Frontend Service - Production
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile.prod
      target: runner
    container_name: dexagents-frontend-prod
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      # Next.js settings
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
      PORT: 3000
      HOSTNAME: "0.0.0.0"
      
      # API Configuration
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-}
      NEXT_PUBLIC_API_TOKEN: ${NEXT_PUBLIC_API_TOKEN:-}
      BACKEND_URL: http://backend:8000
      
      # WebSocket Configuration
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-}
      
      # Application Settings
      NEXT_PUBLIC_APP_NAME: DexAgents
      NEXT_PUBLIC_APP_VERSION: ${APP_VERSION:-3.3.0}
      NEXT_PUBLIC_APP_DESCRIPTION: Windows Endpoint Management Platform
      NEXT_PUBLIC_APP_ENV: production
      
      # Feature Flags - Production settings
      NEXT_PUBLIC_ENABLE_DARK_MODE: "true"
      NEXT_PUBLIC_ENABLE_ANALYTICS: ${NEXT_PUBLIC_ENABLE_ANALYTICS:-false}
      NEXT_PUBLIC_ENABLE_DEBUG: "false"
      NEXT_PUBLIC_ENABLE_DEV_TOOLS: "false"
      
      # Performance settings
      NEXT_PUBLIC_OPTIMIZE_IMAGES: "true"
      NEXT_PUBLIC_COMPRESS_RESPONSES: "true"
      
    networks:
      - dexagents-prod-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy - Production Load Balancer
  nginx:
    image: nginx:alpine
    container_name: dexagents-nginx-prod
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs_prod:/var/log/nginx
      - nginx_cache_prod:/var/cache/nginx
    networks:
      - dexagents-prod-network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  dexagents-prod-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: dexagents-prod
    ipam:
      config:
        - subnet: 172.30.0.0/16

volumes:
  # Database volumes
  postgres_data_prod:
    driver: local
  postgres_logs_prod:
    driver: local
  redis_data_prod:
    driver: local
    
  # Backend volumes
  backend_data_prod:
    driver: local
  backend_logs_prod:
    driver: local
  backend_temp_prod:
    driver: local
  backend_installers_prod:
    driver: local
  backend_uploads_prod:
    driver: local
    
  # Nginx volumes
  nginx_logs_prod:
    driver: local
  nginx_cache_prod:
    driver: local